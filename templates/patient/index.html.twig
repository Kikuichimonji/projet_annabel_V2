{% extends 'base.html.twig' %}
{% block title %}Fiche patient{% endblock %}
{% block nav %}
    {% set class= "" %}
    {% if is_granted('ROLE_ADMIN') %}
        {% set class= "admin" %}
    {% endif %}
<nav id="navbar" class="uk-navbar-container" uk-navbar>
    <div id="navbarLeft">
        <ul class="uk-navbar-nav">
           <li class="uk-active">
                <a href="{{path('home_detail',{'id':app.session.get("cabinet").getId()}) |e}}">Accueil - 
                    {{app.session.get("cabinet").getLibelle()|e}}
                </a>
            </li>
        </ul>
    </div>
    <div id="navbarCenter">
        <a id="homeFull" href="{{path("home_detail",{"id":app.session.get("cabinet").getId()})}}"><h1>Accueil</h1></a>
        <a id="homeSmall" href="{{path("home_detail",{"id":app.session.get("cabinet").getId()})}}"><span uk-icon="icon:home;ratio: 2"></span></a>
    </div>
    <div id="navbarRight">
        <span id="connect">Connecté en tant que : </span><span class="username {{class |e}}"> {{app.user.username |e}}</span>
         <a href="{{path('app_logout')}}"><span uk-icon="icon:close; ratio: 1.5"></span></a>
    </div>
</nav>
{% endblock %}
{% block body %}
<div id="mainWraps">

    {{form_start(form)}}
    
    <div id="adminWrap">
    <h2>Administratif</h2>
     <span class= "vLine administratif "></span>
        <div id="subWrap" class="adminstratif">
            <div class="wraps">
                {{ form_row(form.nom) }}
                {{ form_row(form.prenom) }}
                {{ form_row(form.sexe) }}
                {{ form_row(form.dateNaissance) }}
                {{ form_row(form.profession) }}
                {{ form_row(form.loisir) }}
            </div>
            {% if is_granted('ROLE_ADMIN') %} 
                {% set hidden = "hidden" %}
            {% endif %}      
               
                <div class="wraps ">
                    {{ form_row(form.adresse) }}
                    {{ form_row(form.codePostal) }}
                    {{ form_row(form.ville) }}
                    {{ form_row(form.numFixe) }}
                    {{ form_row(form.numPortable) }}
                    {{ form_row(form.email) }}
                
                </div>
        </div>
    </div>
    <div id="globalAntWrap" class="antecedent">
    <h2>Antécédents</h2>
    <span class= "vLine antecedent"></span>
        <div id="aWrapInsideAWrap">
            <div id="subWrap" class="antecedent">
            
                <div class="wraps">
                    {{ form_row(form.antTete) }}
                    {{ form_row(form.antOrl) }}
                    {{ form_row(form.antOphtalmo) }}
                    {{ form_row(form.antAuditif) }}
                    {{ form_row(form.antDent) }} 
                    {{ form_row(form.antEndoc) }}
                    {{ form_row(form.antPulmo) }}
                </div>
                
                <div class="wraps">
                    {{ form_row(form.antCardia) }}
                    {{ form_row(form.antDigest) }}
                    {{ form_row(form.antUrin) }}
                    {{ form_row(form.antGyneco) }}
                    {{ form_row(form.antDermato) }}
                    {{ form_row(form.antFamille) }}
                </div>
            </div>
            
            <div id="subAnt">
                <div class="wrapsAnt">
                    <label>Traumatologiques</label>
                    {{ form_row(form.antTrauma) }}
                </div>
                <div class="wrapsAnt">
                    <label>Opérations</label>
                    {{ form_row(form.antOpe) }}
                </div>
                <div class="wrapsAnt">
                    <label>Prise de médicaments</label>
                    {{ form_row(form.antPriseMedic) }}
                </div>
            </div>
        </div>
    </div>
        
    <div id="globalConsultWrap">
        <h2>Consultations</h2>
        <span class= "vLine consultation"></span>
        <div id="consultation" data-patient="{{ patient.id |e}}"
            data-prototype="{{ form_widget(form.consultations.vars.prototype)|e }}"
            data-widget-tags="{{ '<div class="consultblock"></div>'|e }}"
            data-cabinet="{{ app.session.get("cabinet").getId() |e}}"
            data-idUtilisateur="{{ app.user.getId() |e }}">
            {% for consult in form.consultations %}
                <div class="consultblock" id="{{consult.id.vars.value}}">
                    {{ form_errors(consult) }}
                    {{ form_widget(consult) }}
                </div>
            {% endfor %}
            <button id='add' class="uk-button-secondary uk-button">Nouvelle séance</button>
        </div>
        <span id="error"></span>
    </div>
    {{ form_end(form) }}
</div>

{% endblock %}

{% block javascripts %}
     {{ parent() }}

     <script>     
        function addNewBlock(event)
        { 
            
            event.preventDefault()

            //On récupère la dernière consultation 
            let consultList = document.getElementsByClassName("consultblock")
            let lastConsult = consultList[consultList.length -1]
        
            //Si il n'existe pas de consultation alors on skip les vérifications
            if(lastConsult)
            {
                
                //On récupère la liste des input required 
                let inputList = lastConsult.getElementsByClassName("consultReq")
                var isOkay = 1

                //On vérifie que les radio bouton sont bien check
                if(!lastConsult.querySelector('input:checked'))
                    isOkay = 0
                    
                //On vérifie chaque input pour voir si ils ont bien une valeur
                Array.prototype.forEach.call(inputList,function(input){
                    if(!input.value)
                        isOkay = 0
                });
            }
            else
                isOkay = 1
            
            //Si tout est okay on passe a la verif suivante
            if(isOkay) 
            {   
                /*On regarde dans le dernier champs contenant le texte à ajouter après la consultation si
                il contient bien une valeur, si ce n'est pas le cas on demande à l'utilisateur d'enregistrer la consult
                On vérifie aussi si il existe bien un block */
                dateListe = document.querySelectorAll("input[name$='[texte]']")

                if(!dateListe.length || dateListe[dateListe.length-1].value)
                {
                    addButton = event.currentTarget

                    // On récupère la liste des consultations
                    let idList = document.getElementsByClassName("consultblock")
                    //On compte le nombre de block de consultation déjà présent
                    let counter = idList.length

                    //On prend l'id du dernier block et on l'incrémente pour avoir une ID unique 
                    //Si il n'y a pas d'id précédente on attribue le 1 par default
                    if(counter)
                    {
                        uniqueID = idList[counter-1].id
                        uniqueID ++ 
                    }
                    else
                        uniqueID = 1

                    //On récupère le prototype de consultation 
                    let consultationBlock = document.getElementById("consultation")
                    let newConsultBlock = consultationBlock.dataset.prototype
                    
                    // On attribue une id unique à chaque blocks et elements de la consultation
                    newConsultBlock = newConsultBlock.replace(/__name__/g, uniqueID) 
                    
                    //On crée le div conteneur de chaque block de consultation
                    let consultDiv = document.createElement('div')
                    consultDiv.className = "consultblock"
                    consultDiv.id = uniqueID
                    //consultDiv.innerHTML = newConsultBlock

                    //On l'intègre a la fin du block principal 
                    let consultation = document.getElementById("consultation")
                    consultation.append( consultDiv )

                    //On insère le prototype dans le block créé 
                    consulList = document.getElementsByClassName("consultblock")
                    consulList[consulList.length -1].innerHTML = newConsultBlock
                    
                    consultation.append(addButton)
            
                    //on insère le bouton de suppression à la fin
                    putDeleteButton(consulList[consulList.length-1],uniqueID);
                    
                    //On attribue une classe au block de formulaire pour le css (sans les boutons de suppression et de visibilité)
                    var subConsultBlock = document.getElementById(uniqueID).children[0]
                    subConsultBlock.className="subConsult"
                    
                    //On force le bon patient dans le selecteur d'objet patient du formulaire
                    idPatient= consultationBlock.dataset.patient
                    var selectPatient = document.getElementById("patient_consultations_"+uniqueID+"_patient");
                    selectPatient.value = idPatient
                    
                    //On force le bon utilisateur dans le selecteur d'objet utilisateur du formulaire
                    idUtilisateur = consultationBlock.dataset.idutilisateur
                    var selectUtilisateur = document.getElementById("patient_consultations_"+uniqueID+"_utilisateur");
                    selectUtilisateur.value = idUtilisateur

                    //On met en place les évenement des radio bouton
                    setupRadio(uniqueID)

                    /*On cache le block precedent pour qu'il n'y ai qu'un block affiché tout en vérifiant quu'il n'est pas déjà caché 
                    (ex: on crée un evenement juste après en avoir supprimé un, donc rien a cacher)*/
                    
                    let previousBlock = idList[idList.length -2].id
                    let previousBlockStyle = document.getElementById(previousBlock).children[0].style.display
                    
                    if(counter && !previousBlockStyle)
                        hideBlock(previousBlock)
        
                    document.getElementById("error").innerHTML = ""
                }
                else  
                    document.getElementById("error").innerHTML = "Veuillez enregistrer la consultation avant d'en démarrer une nouvelle"
            }
            else
                document.getElementById("error").innerHTML = "Tous les champs de la consultation ne sont pas remplis"
        }

        // Fonction permetant d'ajouter un bouton supression à la fin du formulaire de consultation
        function putDeleteButton(form)
        {
            //creation du bouton de suppression
            let deleteButton = document.createElement("BUTTON")
            deleteButton.className = "uk-button-danger buttonPadding"
            deleteButton.innerHTML = "Supprimer"

            //Le bouton est attaché à la fin du formulaire
            form.append(deleteButton)

            //On attache l'évenement click au bouton qui permetra de supprimer le formulaire
            deleteButton.addEventListener("click",function()
            {
                form.remove()
            });
        }

        //Fonction permetant de cacher et réafficher un block consultation
        function hideShowBlock(event)
        {
            // but est le bouton d'affichage correspondant au bon block où l'on click
            let but = event.currentTarget
            event.preventDefault()

            //on verifie qu'il y a bien un statut puis on alterne entre afficher et cacher
            if(but.statut)
                if (but.statut == "hidden")
                {
                    but.statut = "shown"
                    but.block.style.display = "block";
                    but.innerHTML = "Cacher";
                }  
                else
                {
                    but.statut = "hidden"
                    but.block.style.display = "none"
                    but.innerHTML = "Détails";
                }
        }

        //Fonction non evenementielle permetant de cacher tout les blocks sauf la dernière consultation
        function hideBlock(id)
        {
            
            //On cherche le block avec l'id reçue puis on le cache
            var block = document.getElementById(id).children[0]
            block.style.display = "none"
    
            //On lui donne une classe pour le CSS
            block.className="subConsult"

            // On récupère la liste des consultations
            let idList = document.getElementsByClassName("consultblock")

            //On crée un tableau avec uniquement les ID des blocks
            let idArray = []
            Array.prototype.forEach.call(idList,function(consult){
                idArray.push(consult.id)
            });

            //on récupère l'index du block avec l'id actuel et l'id du suivant
            index = idArray.indexOf(id)
            newId = idArray[index+1]

            //Grâce à l'id suivante on scroll pour afficher la dernière
            let newblock = document.getElementById(newId)
            newblock.scrollIntoView({behavior: "smooth"})
            
            //Creation du bouton Show/Hide et initialisation du statut
            let showButton = document.createElement("BUTTON")
            showButton.innerHTML ="Détails"
            showButton.className = "uk-button-primary buttonPadding"
            showButton.statut = "hidden"

            //On cherche le block qu'on veut cacher et on y attache le bouton qui permet de le réafficher
            if(idList[index+1])
            {
                var show = idList[index]
                show.append(showButton)
            }
            
            //consultDate est la date de la consultation, pour mieux identifier le block
            let consultDate = document.createElement("SPAN")
        
            //On recupère le champ texte qui contient le resultat de la propiété getTexte() pour la date et l'utilisateur
            consultDate.innerHTML = block.querySelector("input[name$='[texte]']").value
            consultDate.className = "spanDate"
        
            //On attache la date après le bouton 
            show.append(consultDate)
            
            //On attache l'évènement d'alternance au bouton et on lui donne des paramètres facilement atteignable via l'évenement
            showButton.addEventListener("click",hideShowBlock);
            showButton.block = block   
            
            
        }

        //fonction mettant en place les evenements des radio boutons de moyen de paiement, pour afficher ou cacher le numero de chèque  
        function setupRadio(counter)
        {
            
            //On utilise le querySelector pour chercher tout les elements correspondant aux critères
            let radioPaiement = document.querySelectorAll("input[name='patient[consultations]["+counter+"][moyen_paiement]']");
            let radioCount = 0;
            // On parcours tout les boutons du block radio bouton
            for(rb of radioPaiement)
            {
                
                // on donne une idée unique a chaque bouton pour cibler les effets de l'évenement de click
                
                radioPaiement[radioCount].mainId = counter;
                
                radioPaiement[radioCount].addEventListener("click",clicRadio);

                //si un choxi est présent au chargement et qu'il n'est pas "chèque" on cache tout de suite le champ
                if(radioPaiement[radioCount].checked && radioPaiement[radioCount].value != 2)
                    document.getElementById("patient_consultations_"+counter+"_numero_cheque").parentNode.style.display = "none"
                // On passe au bouton radio suivant    
                radioCount++; 
            }
        }

        //Fonction permettant de cacher ou réafficher le champ "numero de chèque"
        function clicRadio(event) 
        {
            let radio = event.currentTarget
            if(radio.value != 2) 
                document.getElementById("patient_consultations_"+radio.mainId+"_numero_cheque").parentNode.style.display = "none"
            else
                document.getElementById("patient_consultations_"+radio.mainId+"_numero_cheque").parentNode.style.display = "block"
            
            //Choix par default si la consultation n'as pas encore été payée
            if(radio.value == 3)
                document.getElementById("patient_consultations_"+radio.mainId+"_montant").value= 0
        }

        //On attend que le DOM sois chargé avant de lancer les fonctions afin de ne pas avoir de soucis de synchronisation
        //$(document).ready(function()
        window.addEventListener('DOMContentLoaded',function()
        {
            let consultationBlock = document.getElementById("consultation")
            // on recupère l'id du cabinet de la session qui a  été stocké dans les dataset 
            var idCabinet = consultationBlock.dataset.cabinet

            //on récupère le select et on ajoute le cabinet actuel dans la liste des cabinet visité du patient
            let patientCabinet = document.getElementById("patient_cabinet");
            Array.prototype.forEach.call(patientCabinet.options,function(opt){
                if(opt.value == idCabinet)
                    opt.selected = true
            });

    
            //On rajoute un bouton de suppresion a chaque block de consultation
            let collectionForms = document.getElementsByClassName("consultblock")
            Array.prototype.forEach.call(collectionForms,function(forms){
                putDeleteButton(forms)
            });

            let consultInput = document.getElementById("consultation")
            let allInput = consultInput.querySelectorAll("input")
            Array.prototype.forEach.call(allInput, function(input){
                input.disabled= true;
            })
            let allText = consultInput.querySelectorAll("TEXTAREA")
            Array.prototype.forEach.call(allText, function(input){
                input.disabled= true;
            })


             //Ce compteur sert a savoir si des consultations existe déjà 
            let idList = document.getElementsByClassName("idConsult")
            let counter = idList.length;      

            //Si il y a des consultations déjà existante, on les cache toute sauf la dernière
            if(counter)
                for(let i=0; i <= counter-1; i++)
                {
                    if(i==counter-1)
                    {
                        //on applique le CSS au dernier block visible
                        var consultBlock = document.getElementById(idList[i].value).children[0]
                        consultBlock.className="subConsult"
                    } 
                    else  
                        hideBlock(idList[i].value)  //si le block n'est pas le dernier on le cache
                    
                    //dans tout les cas on met en place les evenements des boutons radio de paiement
                    setupRadio(idList[i].value)
                }
            
            
            //On recupère le bouton de nouvelle sceance 
            let addButton = document.getElementById("add")
            addButton.addEventListener("click",addNewBlock)
        })

    </script>
{% endblock %}